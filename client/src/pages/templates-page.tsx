import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { useToast } from "@/hooks/use-toast";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { insertAgentSchema } from "@shared/schema";
import { Search, Filter, Plus, Copy, Eye } from "lucide-react";
import { z } from "zod";

const createAgentSchema = insertAgentSchema.extend({
  tools: z.array(z.string()).optional(),
  googleServices: z.array(z.string()).optional(),
});

type CreateAgentForm = z.infer<typeof createAgentSchema>;

const agentTemplates = [
  {
    id: "atendimento",
    name: "Assistente de Atendimento ao Cliente",
    category: "Atendimento",
    description: "Agente especializado em atendimento geral, SAC e resolu√ß√£o de problemas de clientes.",
    icon: "üë•",
    tags: ["SAC", "Suporte", "Cliente"],
    systemPrompt: `Voc√™ √© um assistente virtual especializado em atendimento ao cliente. Seu objetivo √©:

- Atender clientes com cordialidade e profissionalismo
- Resolver d√∫vidas sobre produtos e servi√ßos
- Orientar sobre procedimentos e pol√≠ticas da empresa
- Escalonar quest√µes complexas quando necess√°rio
- Manter um tom sempre prestativo e emp√°tico

Diretrizes:
- Sempre cumprimente o cliente cordialmente
- Seja claro e objetivo nas respostas
- Ofere√ßa solu√ß√µes pr√°ticas
- Pe√ßa informa√ß√µes espec√≠ficas quando necess√°rio
- Agrade√ßa o contato e se coloque √† disposi√ß√£o`,
    knowledgeBase: "Adicione aqui informa√ß√µes sobre:\n‚Ä¢ Produtos e servi√ßos oferecidos\n‚Ä¢ Pol√≠ticas de troca e devolu√ß√£o\n‚Ä¢ Hor√°rios de funcionamento\n‚Ä¢ Canais de contato\n‚Ä¢ Procedimentos internos\n‚Ä¢ FAQ comum dos clientes"
  },
  {
    id: "suporte",
    name: "Suporte T√©cnico",
    category: "Tecnologia",
    description: "Especialista em resolver problemas t√©cnicos e orientar usu√°rios em quest√µes tecnol√≥gicas.",
    icon: "üîß",
    tags: ["T√©cnico", "TI", "Problemas"],
    systemPrompt: `Voc√™ √© um especialista em suporte t√©cnico. Suas fun√ß√µes incluem:

- Diagnosticar problemas t√©cnicos relatados pelos usu√°rios
- Fornecer solu√ß√µes passo a passo
- Orientar sobre configura√ß√µes e instala√ß√µes
- Identificar quando um problema requer atendimento presencial
- Documentar solu√ß√µes para casos similares

Diretrizes:
- Fa√ßa perguntas espec√≠ficas para entender o problema
- Forne√ßa instru√ß√µes claras e numeradas
- Use linguagem simples, evitando jarg√µes t√©cnicos
- Confirme se a solu√ß√£o funcionou
- Ofere√ßa alternativas quando a primeira solu√ß√£o n√£o funcionar`,
    knowledgeBase: "Inclua informa√ß√µes sobre:\n‚Ä¢ Problemas t√©cnicos mais comuns\n‚Ä¢ Solu√ß√µes passo a passo\n‚Ä¢ Requisitos de sistema\n‚Ä¢ Manuais de produtos\n‚Ä¢ C√≥digos de erro e significados\n‚Ä¢ Procedimentos de escala√ß√£o"
  },
  {
    id: "medico",
    name: "Agendamento M√©dico",
    category: "Sa√∫de",
    description: "Assistente para marcar consultas e orientar sobre procedimentos m√©dicos.",
    icon: "ü©∫",
    tags: ["Sa√∫de", "Consultas", "Agendamento"],
    systemPrompt: `Voc√™ √© um assistente virtual para agendamento m√©dico. Suas responsabilidades:

- Auxiliar no agendamento de consultas e exames
- Informar sobre especialidades dispon√≠veis
- Orientar sobre preparos para exames
- Fornecer informa√ß√µes sobre localiza√ß√£o e hor√°rios
- Esclarecer d√∫vidas sobre procedimentos

Diretrizes:
- Seja emp√°tico e compreensivo com as preocupa√ß√µes dos pacientes
- Solicite informa√ß√µes necess√°rias: nome, telefone, conv√™nio, prefer√™ncia de hor√°rio
- Informe claramente sobre preparos e documentos necess√°rios
- Mantenha confidencialidade das informa√ß√µes m√©dicas
- Encaminhe urg√™ncias para atendimento imediato`,
    knowledgeBase: "Adicione informa√ß√µes sobre:\n‚Ä¢ Especialidades m√©dicas dispon√≠veis\n‚Ä¢ Hor√°rios de funcionamento\n‚Ä¢ Conv√™nios aceitos\n‚Ä¢ Preparos para exames\n‚Ä¢ Localiza√ß√£o e estacionamento\n‚Ä¢ Documentos necess√°rios\n‚Ä¢ Pol√≠ticas de cancelamento"
  },
  {
    id: "petshop",
    name: "Atendimento PetShop",
    category: "Animais",
    description: "Especialista em cuidados com animais de estima√ß√£o e produtos pet.",
    icon: "üêï",
    tags: ["Pets", "Animais", "Cuidados"],
    systemPrompt: `Voc√™ √© um assistente especializado em petshop. Seu papel √©:

- Orientar sobre cuidados com animais de estima√ß√£o
- Recomendar produtos adequados para cada tipo de pet
- Agendar servi√ßos como banho, tosa e consultas veterin√°rias
- Fornecer dicas de alimenta√ß√£o e cuidados
- Esclarecer d√∫vidas sobre comportamento animal

Diretrizes:
- Demonstre amor e carinho pelos animais
- Pergunte sobre esp√©cie, ra√ßa, idade e tamanho do pet
- Recomende produtos baseados nas necessidades espec√≠ficas
- Oriente sobre a import√¢ncia da vacina√ß√£o e vermifuga√ß√£o
- Encaminhe problemas de sa√∫de para o veterin√°rio`,
    knowledgeBase: "Inclua informa√ß√µes sobre:\n‚Ä¢ Produtos por categoria (ra√ß√£o, brinquedos, acess√≥rios)\n‚Ä¢ Servi√ßos oferecidos (banho, tosa, veterin√°ria)\n‚Ä¢ Calend√°rio de vacina√ß√£o\n‚Ä¢ Cuidados por esp√©cie e idade\n‚Ä¢ Pre√ßos e promo√ß√µes\n‚Ä¢ Hor√°rios de funcionamento"
  },
  {
    id: "juridico",
    name: "Consultoria Jur√≠dica",
    category: "Jur√≠dico",
    description: "Assistente para orienta√ß√µes jur√≠dicas iniciais e agendamento de consultas.",
    icon: "‚öñÔ∏è",
    tags: ["Direito", "Consultoria", "Legal"],
    systemPrompt: `Voc√™ √© um assistente jur√≠dico virtual. Suas fun√ß√µes incluem:

- Fornecer orienta√ß√µes jur√≠dicas iniciais e gerais
- Agendar consultas com advogados especializados
- Explicar procedimentos legais de forma simples
- Identificar a √°rea do direito adequada para cada caso
- Orientar sobre documenta√ß√£o necess√°ria

Diretrizes:
- Deixe claro que n√£o substitui a consultoria de um advogado
- Use linguagem acess√≠vel, evitando juridiqu√™s
- Seja imparcial e objetivo
- Oriente sobre prazos legais importantes
- Mantenha absoluto sigilo sobre as informa√ß√µes compartilhadas
- Encaminhe casos complexos para advogados especializados`,
    knowledgeBase: "Adicione informa√ß√µes sobre:\n‚Ä¢ √Åreas de atua√ß√£o do escrit√≥rio\n‚Ä¢ Advogados e suas especializa√ß√µes\n‚Ä¢ Procedimentos legais b√°sicos\n‚Ä¢ Documentos necess√°rios por tipo de caso\n‚Ä¢ Prazos legais importantes\n‚Ä¢ Tabela de honor√°rios\n‚Ä¢ Formas de pagamento"
  },
  {
    id: "odontologico",
    name: "Cl√≠nica Odontol√≥gica",
    category: "Sa√∫de",
    description: "Assistente para agendamento e orienta√ß√µes sobre tratamentos dent√°rios.",
    icon: "ü¶∑",
    tags: ["Odontologia", "Dentista", "Tratamentos"],
    systemPrompt: `Voc√™ √© um assistente virtual de cl√≠nica odontol√≥gica. Seu objetivo √©:

- Agendar consultas e tratamentos odontol√≥gicos
- Orientar sobre procedimentos dent√°rios
- Fornecer dicas de higiene bucal
- Esclarecer d√∫vidas sobre tratamentos
- Informar sobre cuidados p√≥s-procedimentos

Diretrizes:
- Seja tranquilizador, muitos pacientes t√™m medo de dentista
- Explique procedimentos de forma clara e reconfortante
- Pergunte sobre hist√≥rico de problemas dent√°rios
- Oriente sobre preparos necess√°rios
- Enfatize a import√¢ncia da preven√ß√£o
- Encaminhe urg√™ncias e dores para atendimento imediato`,
    knowledgeBase: "Inclua informa√ß√µes sobre:\n‚Ä¢ Tratamentos oferecidos (limpeza, canal, ortodontia, etc.)\n‚Ä¢ Dentistas e especializa√ß√µes\n‚Ä¢ Conv√™nios odontol√≥gicos aceitos\n‚Ä¢ Cuidados pr√© e p√≥s-procedimentos\n‚Ä¢ Dicas de higiene bucal\n‚Ä¢ Pre√ßos e formas de pagamento\n‚Ä¢ Urg√™ncias odontol√≥gicas"
  },
  {
    id: "vendas",
    name: "Assistente de Vendas",
    category: "Vendas",
    description: "Especialista em processos de vendas, qualifica√ß√£o de leads e convers√£o.",
    icon: "üíº",
    tags: ["Vendas", "Leads", "Convers√£o"],
    systemPrompt: `Voc√™ √© um assistente especializado em vendas. Suas responsabilidades:

- Qualificar leads e identificar necessidades dos clientes
- Apresentar produtos e servi√ßos de forma persuasiva
- Responder obje√ß√µes e d√∫vidas sobre produtos
- Acompanhar o processo de vendas at√© o fechamento
- Oferecer suporte p√≥s-venda

Diretrizes:
- Seja consultivo, n√£o apenas vendedor
- Fa√ßa perguntas para entender as necessidades reais
- Apresente benef√≠cios, n√£o apenas caracter√≠sticas
- Crie senso de urg√™ncia quando apropriado
- Mantenha relacionamento mesmo ap√≥s a venda`,
    knowledgeBase: "Inclua informa√ß√µes sobre:\n‚Ä¢ Cat√°logo completo de produtos/servi√ßos\n‚Ä¢ Pre√ßos e condi√ß√µes de pagamento\n‚Ä¢ Promo√ß√µes e descontos dispon√≠veis\n‚Ä¢ Processo de vendas da empresa\n‚Ä¢ Scripts para obje√ß√µes comuns\n‚Ä¢ Pol√≠ticas de garantia"
  },
  {
    id: "educacao",
    name: "Assistente Educacional",
    category: "Educa√ß√£o",
    description: "Apoio educacional para estudantes, professores e institui√ß√µes de ensino.",
    icon: "üìö",
    tags: ["Educa√ß√£o", "Ensino", "Estudantes"],
    systemPrompt: `Voc√™ √© um assistente educacional virtual. Suas fun√ß√µes:

- Auxiliar estudantes com d√∫vidas acad√™micas
- Orientar sobre metodologias de estudo
- Fornecer informa√ß√µes sobre cursos e programas
- Agendar aulas particulares ou de refor√ßo
- Explicar conceitos de forma did√°tica

Diretrizes:
- Adapte a linguagem ao n√≠vel do estudante
- Use exemplos pr√°ticos para explicar conceitos
- Incentive o pensamento cr√≠tico
- Seja paciente e encorajador
- Sugira recursos adicionais de estudo`,
    knowledgeBase: "Adicione informa√ß√µes sobre:\n‚Ä¢ Cursos e disciplinas oferecidos\n‚Ä¢ Calend√°rio acad√™mico\n‚Ä¢ Professores e especializa√ß√µes\n‚Ä¢ Material did√°tico dispon√≠vel\n‚Ä¢ Formas de avalia√ß√£o\n‚Ä¢ Recursos de apoio ao estudante"
  }
];

const categories = [...new Set(agentTemplates.map(t => t.category))];

export default function TemplatesPage() {
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState<string>("all");
  const [selectedTemplate, setSelectedTemplate] = useState<typeof agentTemplates[0] | null>(null);
  const [showPreview, setShowPreview] = useState(false);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const createAgentMutation = useMutation({
    mutationFn: async (data: CreateAgentForm) => {
      const res = await apiRequest("POST", "/api/agents", data);
      return await res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/agents"] });
      queryClient.invalidateQueries({ queryKey: ["/api/dashboard/stats"] });
      toast({
        title: "Agente criado",
        description: "Agente criado com sucesso a partir do template!",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Erro",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const filteredTemplates = agentTemplates.filter(template => {
    const matchesSearch = template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         template.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         template.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesCategory = selectedCategory === "all" || template.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  const handleCreateFromTemplate = (template: typeof agentTemplates[0]) => {
    const agentData: CreateAgentForm = {
      name: template.name,
      description: template.description,
      systemPrompt: template.systemPrompt,
      knowledgeBase: template.knowledgeBase,
      model: "gpt-4o-mini",
      temperature: 0.7,
      maxTokens: 2048,
      topP: 1.0,
      status: "draft",
      responseStyle: "professional",
      language: "pt",
    };
    createAgentMutation.mutate(agentData);
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "Copiado",
      description: "Texto copiado para a √°rea de transfer√™ncia",
    });
  };

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">Templates de Agentes</h1>
        <p className="text-muted-foreground">
          Escolha entre templates profissionais pr√©-configurados para criar seus agentes rapidamente
        </p>
      </div>

      {/* Filtros */}
      <div className="mb-6 flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
          <Input
            placeholder="Buscar templates..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
        </div>
        <Select value={selectedCategory} onValueChange={setSelectedCategory}>
          <SelectTrigger className="w-full sm:w-[180px]">
            <Filter className="h-4 w-4 mr-2" />
            <SelectValue placeholder="Categoria" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">Todas</SelectItem>
            {categories.map(category => (
              <SelectItem key={category} value={category}>{category}</SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

      {/* Grid de Templates */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredTemplates.map((template) => (
          <Card key={template.id} className="hover:shadow-lg transition-shadow">
            <CardHeader>
              <div className="flex items-start justify-between">
                <div className="flex items-center space-x-3">
                  <span className="text-3xl">{template.icon}</span>
                  <div>
                    <CardTitle className="text-lg">{template.name}</CardTitle>
                    <Badge variant="secondary" className="mt-1">
                      {template.category}
                    </Badge>
                  </div>
                </div>
              </div>
              <CardDescription className="mt-2">
                {template.description}
              </CardDescription>
              <div className="flex flex-wrap gap-1 mt-2">
                {template.tags.map(tag => (
                  <Badge key={tag} variant="outline" className="text-xs">
                    {tag}
                  </Badge>
                ))}
              </div>
            </CardHeader>
            <CardContent>
              <div className="flex gap-2">
                <Button
                  onClick={() => {
                    setSelectedTemplate(template);
                    setShowPreview(true);
                  }}
                  variant="outline"
                  size="sm"
                  className="flex-1"
                >
                  <Eye className="h-4 w-4 mr-2" />
                  Visualizar
                </Button>
                <Button
                  onClick={() => handleCreateFromTemplate(template)}
                  disabled={createAgentMutation.isPending}
                  size="sm"
                  className="flex-1"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Criar Agente
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {filteredTemplates.length === 0 && (
        <div className="text-center py-12">
          <p className="text-muted-foreground">
            Nenhum template encontrado com os filtros aplicados.
          </p>
        </div>
      )}

      {/* Modal de Preview */}
      <Dialog open={showPreview} onOpenChange={setShowPreview}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center space-x-3">
              <span className="text-2xl">{selectedTemplate?.icon}</span>
              <span>{selectedTemplate?.name}</span>
            </DialogTitle>
          </DialogHeader>
          
          {selectedTemplate && (
            <div className="space-y-6">
              <div>
                <Badge variant="secondary">{selectedTemplate.category}</Badge>
                <p className="text-muted-foreground mt-2">{selectedTemplate.description}</p>
              </div>

              <div>
                <div className="flex items-center justify-between mb-2">
                  <h3 className="font-semibold">Prompt do Sistema</h3>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => copyToClipboard(selectedTemplate.systemPrompt)}
                  >
                    <Copy className="h-4 w-4" />
                  </Button>
                </div>
                <div className="bg-muted p-4 rounded-lg">
                  <pre className="whitespace-pre-wrap text-sm">{selectedTemplate.systemPrompt}</pre>
                </div>
              </div>

              <div>
                <div className="flex items-center justify-between mb-2">
                  <h3 className="font-semibold">Base de Conhecimento Sugerida</h3>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => copyToClipboard(selectedTemplate.knowledgeBase)}
                  >
                    <Copy className="h-4 w-4" />
                  </Button>
                </div>
                <div className="bg-muted p-4 rounded-lg">
                  <pre className="whitespace-pre-wrap text-sm">{selectedTemplate.knowledgeBase}</pre>
                </div>
              </div>

              <div className="flex gap-2">
                <Button
                  onClick={() => handleCreateFromTemplate(selectedTemplate)}
                  disabled={createAgentMutation.isPending}
                  className="flex-1"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Criar Agente com Este Template
                </Button>
                <Button variant="outline" onClick={() => setShowPreview(false)}>
                  Fechar
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}