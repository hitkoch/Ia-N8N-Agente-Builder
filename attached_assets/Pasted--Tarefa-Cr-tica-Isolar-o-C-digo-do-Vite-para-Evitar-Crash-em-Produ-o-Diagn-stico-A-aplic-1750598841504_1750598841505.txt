## Tarefa Cr√≠tica: Isolar o C√≥digo do Vite para Evitar Crash em Produ√ß√£o

**Diagn√≥stico:** A aplica√ß√£o est√° crashando ao iniciar porque est√° tentando carregar a configura√ß√£o do Vite (`vite.config.ts`) em modo de produ√ß√£o, resultando em um erro `TypeError`. Precisamos garantir que o c√≥digo relacionado ao Vite seja executado APENAS em modo de desenvolvimento.

**A√ß√£o:** Modifique o arquivo `server/index.ts` para usar uma importa√ß√£o din√¢mica, garantindo que os m√≥dulos do Vite s√≥ sejam carregados quando `process.env.NODE_ENV === 'development'`.

**Substitua o bloco de c√≥digo de inicializa√ß√£o `(async () => { ... })();` no final do seu `server/index.ts` pelo c√≥digo corrigido abaixo:**

```typescript
// Substitua o final do seu arquivo server/index.ts por este bloco

(async () => {
  // Setup webhook routes com prioridade
  setupWebhookRoutes(app);

  // Health check endpoint
  app.get('/health', (req, res) => {
    res.json({ status: 'ok', timestamp: new Date().toISOString() });
  });
  
  // Registra as rotas da API
  const server = await registerRoutes(app);

  // --- L√ìGICA DE SERVIDOR DE FRONTEND CORRIGIDA ---
  if (process.env.NODE_ENV === "development") {
    // Importa√ß√£o din√¢mica: s√≥ carrega o vite em modo de desenvolvimento
    const { setupVite } = await import("./vite");
    await setupVite(app, server);
    console.log("üå± Servidor Vite configurado para desenvolvimento.");
    setTimeout(() => seedDatabase(), 1000);
  } else {
    // Em produ√ß√£o, apenas sirva os arquivos est√°ticos j√° constru√≠dos
    const { serveStatic } = await import("./vite");
    serveStatic(app);
    console.log("üì¶ Servindo arquivos est√°ticos para produ√ß√£o.");
    setTimeout(() => seedDatabase(), 1000);
  }

  // Error handler
  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
    const status = err.status || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    console.error("‚ùå Erro n√£o tratado:", err);
  });

  const port = 5000;
  server.listen({ port, host: "0.0.0.0" }, () => {
    log(`üöÄ Servidor rodando na porta ${port} em modo ${process.env.NODE_ENV}`);
    
    if (process.env.NODE_ENV === 'production') {
      keepAliveService.start();
    }
    
    setTimeout(async () => {
      try {
        await webhookOptimizer.preWarmCaches();
        webhookOptimizer.startPeriodicWarmup();
        whatsappMonitor.start();
      } catch (error) {
        console.log('Cache warmup ir√° rodar mais tarde.');
      }
    }, 3000);
  });
})();