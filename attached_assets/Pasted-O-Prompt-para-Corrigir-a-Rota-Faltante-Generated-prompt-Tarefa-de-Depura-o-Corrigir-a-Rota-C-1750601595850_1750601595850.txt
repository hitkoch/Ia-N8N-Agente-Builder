O Prompt para Corrigir a Rota Faltante
Generated prompt
## Tarefa de Depura√ß√£o: Corrigir a Rota "Cannot POST /api/agents"

**Diagn√≥stico:** A aplica√ß√£o est√° retornando um erro 404 Not Found com a mensagem "Cannot POST /api/agents" ao tentar criar um novo agente. Isso indica que a rota para criar agentes n√£o est√° registrada ou est√° configurada incorretamente no servidor Express.

**A√ß√£o:** Verifique e, se necess√°rio, crie a estrutura de rotas e o controlador para gerenciar agentes, garantindo que o endpoint `POST /api/agents` esteja funcional.

---

### **A√á√ÉO 1: CRIAR O CONTROLADOR DE AGENTES (`agentController.ts`)**

**Instru√ß√£o:** Crie um novo arquivo em `server/controllers/agentController.ts` (ou em um local similar) com a l√≥gica para criar um agente.

```typescript
// Conte√∫do para server/controllers/agentController.ts

import type { Request, Response } from 'express';
import { db } from '../../db'; // Ajuste o caminho para sua conex√£o Drizzle
import { agents } from '../../db/schema/agents'; // Ajuste o caminho para seu schema

export const agentController = {
  // Fun√ß√£o para criar um novo agente
  createAgent: async (req: Request, res: Response) => {
    try {
      const { name, systemPrompt, model } = req.body;
      const userId = req.user.id; // Supondo que o middleware de auth anexa o usu√°rio

      if (!name || !systemPrompt || !userId) {
        return res.status(400).json({ message: "Nome, prompt de sistema e ID do usu√°rio s√£o obrigat√≥rios." });
      }

      const newAgent = await db.insert(agents).values({
        name,
        systemPrompt,
        model: model || 'gpt-4o', // Usa o modelo do corpo ou o padr√£o
        ownerId: userId,
      }).returning(); // .returning() retorna o objeto criado

      console.log(`ü§ñ Novo agente criado: ${newAgent[0].name} (ID: ${newAgent[0].id})`);
      res.status(201).json(newAgent[0]);

    } catch (error) {
      console.error("‚ùå Erro ao criar agente:", error);
      res.status(500).json({ message: "Erro interno do servidor." });
    }
  },

  // Adicione outras fun√ß√µes aqui (getAgents, updateAgent, etc.) conforme necess√°rio
};
Use code with caution.
Prompt
A√á√ÉO 2: CRIAR O ARQUIVO DE ROTAS DOS AGENTES (agentRoutes.ts)
Instru√ß√£o: Crie um novo arquivo em server/routes/agentRoutes.ts para definir os endpoints da API para os agentes.
Generated typescript
// Conte√∫do para server/routes/agentRoutes.ts

import { Router } from 'express';
import { agentController } from '../controllers/agentController';
import { isAuthenticated } from '../middleware/authMiddleware'; // Supondo que voc√™ tenha um middleware de autentica√ß√£o

const router = Router();

// Define a rota POST para criar um agente.
// Ela ser√° protegida pelo middleware de autentica√ß√£o.
router.post('/agents', isAuthenticated, agentController.createAgent);

// Adicione outras rotas aqui (GET, PUT, DELETE)

export default router;
Use code with caution.
TypeScript
A√á√ÉO 3: REGISTRAR AS ROTAS NO SERVIDOR PRINCIPAL
Instru√ß√£o: No seu arquivo server/index.ts (ou onde quer que a fun√ß√£o registerRoutes esteja), certifique-se de que as novas rotas de agente est√£o sendo importadas e usadas.
Modifique a fun√ß√£o registerRoutes (ou o arquivo server/routes.ts):
Generated typescript
// Exemplo em um arquivo como server/routes.ts

import { type Express } from 'express';
import authRoutes from './routes/authRoutes';
import agentRoutes from './routes/agentRoutes'; // <-- IMPORTA A NOVA ROTA

export async function registerRoutes(app: Express) {
  app.use('/api', authRoutes);
  app.use('/api', agentRoutes); // <-- USA A NOVA ROTA com o prefixo /api

  const { createServer } = await import('http');
  return createServer(app);
}
